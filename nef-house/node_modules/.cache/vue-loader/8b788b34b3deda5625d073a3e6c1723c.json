{"remainingRequest":"/Users/nisit/sites/nef-house/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nisit/sites/nef-house/src/components/vue-drag-it-dude/src/components/DragItDude.vue?vue&type=style&index=0&lang=css","dependencies":[{"path":"/Users/nisit/sites/nef-house/src/components/vue-drag-it-dude/src/components/DragItDude.vue","mtime":1632148739815},{"path":"/Users/nisit/sites/nef-house/node_modules/css-loader/index.js","mtime":1632148780408},{"path":"/Users/nisit/sites/nef-house/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1521907989000},{"path":"/Users/nisit/sites/nef-house/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nisit/sites/nef-house/node_modules/cache-loader/dist/cjs.js","mtime":1632148781129},{"path":"/Users/nisit/sites/nef-house/node_modules/vue-loader/lib/index.js","mtime":1527860006000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.drag-it-dude {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tz-index: 1;\n    width: 100%;\n    height: 100%;\n    overflow: scroll;\n    padding-right: 17px;\n    padding-bottom: 17px;\n}\n",{"version":3,"sources":["DragItDude.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DragItDude.vue","sourceRoot":"src/components/vue-drag-it-dude/src/components","sourcesContent":["<template>\n\t<div\n\t\tclass=\"drag-it-dude\"\n\t\t@touchstart.stop=\"hang\"\n\t\t@touchend.stop=\"drop\"\n\t\t@mousedown.stop=\"hang\"\n\t\t@mouseup.stop=\"drop\"\n\t\t\n\t>\n\t\t<slot></slot>\n\t</div>\n</template>\n\n<script>\n\t/*\n\t * Originally made by Esvalirion\n\t * Modified by Jacob Watson\n\t * Allows for panning around a scaling image\n\t */\n\n\texport default {\n\t\tname: 'drag-it-dude',\n\t\tprops: {\n\t\t\twidth: {\n\t\t\t\ttype: Number,\n\t\t\t\tdefault: 0,\n\t\t\t},\n\t\t\theight: {\n\t\t\t\ttype: Number,\n\t\t\t\tdefault: 0,\n\t\t\t},\n\t\t\tparentWidth: {\n\t\t\t\ttype: Number,\n\t\t\t\tdefault: 0,\n\t\t\t},\n\t\t\tparentHeight: {\n\t\t\t\ttype: Number,\n\t\t\t\tdefault: 0,\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\ttype: Number,\n\t\t\t\tdefault: 1,\n\t\t\t},\n\t\t\ttop: {\n\t\t\t\ttype: Number,\n\t\t\t\tdefault: 1,\n\t\t\t},\n\t\t\tleft: {\n\t\t\t\ttype: Number,\n\t\t\t\tdefault: 1,\n\t\t\t}\n        },\n\n        data() {\n            return {\n                shiftY: null,\n                shiftX: null,\n                intLeft: this.left,\n                intTop: this.top,\n                scrollLeft: 0,\n                scrollTop: 0,\n                tempLeft: 0,\n                tempTop: 0,\n                maxLeft: 0,\n                maxTop: 0,\n            }\n\t\t},\n\n        computed: {\n            isIos() {\n                return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n            }\n        },\n\n\t\twatch: {\n\t\t\t// When scale is changed, make sure panning does not go outside bounds of image\n\t\t\tscale(newValue, oldValue) {\n                var w2 = this.$el.parentNode.offsetWidth / 2;\n                var h2 = this.$el.parentNode.offsetHeight / 2\n\n                this.intLeft = (this.intLeft - w2) / oldValue * newValue + w2;\n                this.intTop = (this.intTop - h2) / oldValue * newValue + h2;\n            },\n            left(newValue) {\n                this.intLeft = newValue;\n                this.maxLeft = Math.min(this.maxLeft - 50, newValue);\n            },\n            top(newValue) {\n                this.intTop = newValue;\n                this.maxTop = Math.min(this.maxTop - 50, newValue);\n            },\n            intLeft(newValue) {\n                // newLeft must be <= 0\n\t\t\t\t// newLeft + offset must not be greater than image's width\n\t\t\t\tif (newValue > 0) {\n\t\t\t\t\tnewValue = 0;\n\t\t\t\t} else if (newValue < this.maxLeft && newValue - this.$el.parentNode.offsetWidth < -1 * this.$el.childNodes[0].offsetWidth - (this.$el.childNodes[0].offsetWidth * (this.scale - 1))) {\n\t\t\t\t\tnewValue = Math.min(\n                        -1 * this.$el.childNodes[0].offsetWidth - (this.$el.childNodes[0].offsetWidth * (this.scale - 1)) + this.$el.parentNode.offsetWidth + 1,\n                        this.maxLeft\n                    );\n\t\t\t\t}\n\n                this.$emit('update:left', newValue);\n                this.$el.scrollLeft = newValue * -1;\n                this.intLeft = newValue;\n            },\n            intTop(newValue) {\n                // newTop must be >= 0\n\t\t\t\t// newTop + offset must not be greater than image's height\n\t\t\t\tif (newValue > 0) {\n\t\t\t\t\tnewValue = 0;\n\t\t\t\t} else if (newValue < this.maxTop && newValue - this.$el.parentNode.offsetHeight < -1 * this.$el.childNodes[0].offsetHeight - (this.$el.childNodes[0].offsetHeight * (this.scale - 1))) {\n\t\t\t\t\tnewValue = Math.min(\n                        -1 * this.$el.childNodes[0].offsetHeight - (this.$el.childNodes[0].offsetHeight * (this.scale - 1)) + this.$el.parentNode.offsetHeight + 1,\n                        this.maxTop\n                    );\n                }\n\n                this.$emit('update:top', newValue);\n                this.$el.scrollTop = newValue * -1;\n                this.intTop = newValue;\n            },\n            scrollLeft(newValue) {\n                this.$el.scrollLeft = newValue * -1;\n            },\n            scrollTop(newValue) {\n                this.$el.scrollTop = newValue * -1;\n            }\n\t\t},\n\n\t\t// Functions that can be called\n\t\tmethods: {\n            handleScroll(e) {\n                this.scrollTop = this.intTop = this.$el.scrollTop * -1;\n                this.scrollLeft = this.intLeft = this.$el.scrollLeft * -1;\n            },\n\n\t\t\t// Element has become active\n\t\t\t// e: event\n\t\t\thang(e) {\n\t\t\t\tthis.$emit('activated');\n\n\t\t\t\t// If available use coordinates of click to decide starting point for drag\n\t\t\t\t// If not available, use last known coordinates to decide\n\t\t\t\tthis.shiftX = typeof e.pageX != 'undefined' ? e.pageX : e.changedTouches[0].pageX;\n\t\t\t\tthis.shiftY = typeof e.pageY != 'undefined' ? e.pageY : e.changedTouches[0].pageY;\n\n\t\t\t\t// If not iOS and coordinates of click are available, characterize as mouse\n\t\t\t\t// Otherwise, characterize as touch\n\t\t\t\tif (typeof e.pageX != 'undefined' && !this.isIos) {\n\t\t\t\t\tthis.$el.addEventListener('mousemove', this.elementMove);\n\t\t\t\t\tthis.$el.addEventListener('mouseleave', this.drop);\n\t\t\t\t} else {\n\t\t\t\t\tthis.$el.addEventListener('touchmove', this.elementMove);\n\t\t\t\t\tthis.$el.addEventListener('touchend', this.drop);\n                }\n                \n                // Save starting point\n                this.tempLeft = this.intLeft;\n                this.tempTop = this.intTop;\n\t\t\t},\n\n\t\t\t// Element is being dragged\n\t\t\t// e: event\n\t\t\telementMove(e) {\n\t\t\t\tthis.$emit('dragging');\n\t\t\t\te.preventDefault();\n\n\t\t\t\tif (typeof e.pageY != 'undefined') {\n\t\t\t\t\tdocument.body.style.overflow = 'hidden';\n\t\t\t\t}\n\n\t\t\t\t// If available use coordinates of click to decide how much to shift x/y\n\t\t\t\t// If not available, use last known coordinates to decide\n\t\t\t\tconst x = typeof e.pageX != 'undefined' ? e.pageX : e.changedTouches[0].pageX;\n\t\t\t\tconst y = typeof e.pageY != 'undefined' ? e.pageY : e.changedTouches[0].pageY;\n\n                // Decide new boundries of rectangle\n\t\t\t\tthis.intLeft = this.tempLeft + x - this.shiftX;\n\t\t\t\tthis.intTop = this.tempTop + y - this.shiftY;\n\t\t\t},\n\n\t\t\t// Element is dropped\n\t\t\tdrop() {\n\t\t\t\tthis.$emit('dropped');\n\t\t\t\tdocument.body.style.overflow = null;\n\n\t\t\t\t// Stop moving image on mouse movement\n\t\t\t\tthis.$el.removeEventListener('mousemove', this.elementMove, false);\n\t\t\t\tthis.$el.removeEventListener('touchmove', this.elementMove, false);\n\n\t\t\t\t// End drop\n\t\t\t\tthis.$el.onmouseup = null;\n\t\t\t\tthis.$el.ontouchend = null;\n            },\n            \n            center() {\n                this.intTop = (this.$el.childNodes[0].offsetHeight * this.scale - this.$el.parentNode.offsetHeight) / 2 * -1;\n                this.intLeft = (this.$el.childNodes[0].offsetWidth * this.scale - this.$el.parentNode.offsetWidth) / 2 * -1;\n            }\n\t\t},\n\n\t\tmounted() {\n            this.center();\n            this.$el.addEventListener('scroll', this.handleScroll);\n        },\n\n        beforeDestroy() {\n            this.$el.removeEventListener('scroll', this.handleScroll);\n        }\n\t};\n</script>\n\n<style>\n.drag-it-dude {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tz-index: 1;\n    width: 100%;\n    height: 100%;\n    overflow: scroll;\n    padding-right: 17px;\n    padding-bottom: 17px;\n}\n</style>\n"]}]}