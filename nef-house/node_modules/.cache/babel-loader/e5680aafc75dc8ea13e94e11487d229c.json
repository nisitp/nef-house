{"remainingRequest":"/Users/nisit/sites/nef-house/node_modules/babel-loader/lib/index.js!/Users/nisit/sites/nef-house/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nisit/sites/nef-house/src/views/Question.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nisit/sites/nef-house/src/views/Question.vue","mtime":1635780479520},{"path":"/Users/nisit/sites/nef-house/node_modules/cache-loader/dist/cjs.js","mtime":1632148781129},{"path":"/Users/nisit/sites/nef-house/node_modules/babel-loader/lib/index.js","mtime":1529635966000},{"path":"/Users/nisit/sites/nef-house/node_modules/vue-loader/lib/index.js","mtime":1527860006000}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/nisit/sites/nef-house/node_modules/@babel/runtime/helpers/builtin/es6/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapGetters } from 'vuex';\nexport default {\n  // Local Variables\n  data: function data() {\n    return {\n      isChoice: false,\n      isLimit: false,\n      isNumber: false,\n      tick: 0,\n      selectedAnswer: null,\n      numberAnswer: 0,\n      limitAnswer: \"\",\n      submitEnabled: false\n    };\n  },\n  mounted: function mounted() {\n    document.getElementsByClassName(\"quiz\")[0].classList.remove(\"ad\");\n  },\n  watch: {\n    // Whenever the id of the question changes, ticks and changes the type of question displayed\n    tick: function tick() {\n      if (this.questions[this.questionId].type === \"choice\") {\n        this.isChoice = true;\n        this.isLimit = false;\n        this.isNumber = false;\n      } else if (this.questions[this.questionId].type === \"limit\") {\n        this.isChoice = false;\n        this.isLimit = true;\n        this.isNumber = false;\n      } else if (this.questions[this.questionId].type === \"number\") {\n        this.isChoice = false;\n        this.isLimit = false;\n        this.isNumber = true;\n      } else {\n        console.log(\"ERROR: Question did not have a type\");\n        this.isChoice = false;\n        this.isLimit = false;\n        this.isNumber = false;\n      }\n    }\n  },\n  // Computed variables are set whenever one of the variables involved changes value\n  computed: _objectSpread({\n    // questionsCount: Number of questions in total\n    questionsCount: function questionsCount() {\n      return this.questions.length;\n    },\n    // questionId: The id of the question (ex: 3rd question out of 10)\n    questionId: function questionId() {\n      this.tick += 1;\n      var id = this.$route.params.question;\n      return typeof this.questions[id] != \"undefined\" ? id : null;\n    },\n    // question: The question text\n    // If the question does not exist, returns an empty string\n    question: function question() {\n      return this.questionId === null ? \"\" : this.questions[this.questionId].question;\n    },\n    // possibleAnswers: All possible answers of a multiple choice question\n    // Returns the answers in a random order\n    possibleAnswers: function possibleAnswers() {\n      if (this.questionId != null) {\n        if (this.questions[this.questionId].type === \"choice\") {\n          return this.questions[this.questionId].answers.map(function (a, i) {\n            return {\n              i: i,\n              a: a\n            };\n          }).map(function (a) {\n            return [Math.random(), a];\n          }).map(function (a) {\n            return a[1];\n          });\n        }\n      }\n\n      return [];\n    },\n    // If the character becomes null, returns to the starting page\n    redirect: function redirect() {\n      if (this.character === null) return '/quiz';\n      return null;\n    },\n    // Styles limit questions\n    styleLimitAnswer: function styleLimitAnswer() {\n      return {\n        paddingLeft: (225 - (this.questions[this.questionId].maxLength - 1) * 11 - this.questions[this.questionId].maxLength * 18) / (this.questions[this.questionId].maxLength + 1) + \"px\",\n        letterSpacing: (235 - this.questions[this.questionId].maxLength * 11) / this.questions[this.questionId].maxLength + \"px\",\n        border: 0,\n        margin: 0,\n        fontFamily: '\"Lucida Console\", Lucida, monospace',\n        fontStyle: \"bold\",\n        fontSize: 18 + \"px\",\n        background: \"transparent\",\n        width: 235 + \"px\"\n      };\n    },\n    // Styles the underline of limit questions\n    styleLimitUnderline: function styleLimitUnderline() {\n      return {\n        background: \"#0099a9\",\n        backgroundImage: \"linear-gradient(to left, white 70%, #0099a9 0%)\",\n        backgroundPosition: \"bottom\",\n        backgroundSize: 235 / this.questions[this.questionId].maxLength + \"px \" + 1 + \"px\",\n        backgroundRepeat: \"repeat-x\",\n        backgroundPositionX: .7 * (235 / this.questions[this.questionId].maxLength) + \"px\",\n        width: 230 + \"px\",\n        height: 1 + \"px\"\n      };\n    },\n    // correct: A boolean indicating whether was answered correctly or not\n    correct: function correct() {\n      return this.answers[this.questionId];\n    }\n  }, mapState(['character', 'answers']), mapGetters(['questions', 'score'])),\n  // Functions that can be called\n  methods: {\n    // Selects an answer to the question\n    // answer: id of the answer to be selected\n    selectAnswer: function selectAnswer(answer) {\n      this.answerFilled = true;\n      this.selectedAnswer = answer.i;\n      this.answerDesc = answer.a;\n    },\n    submitDisabled: function submitDisabled() {\n      if (this.isNumber) return false;\n\n      if (this.isChoice) {\n        return this.answerFilled !== true;\n      } // otherwise we're dealing with an entered field\n\n\n      return !this.limitAnswer.length;\n    },\n    // Submits the selected answer, thereby calling the result for the question\n    submitAnswer: function submitAnswer() {\n      if (this.selectedAnswer !== null) {\n        this.$store.commit('setAnswer', {\n          question: this.questionId,\n          answer: this.answerDesc\n        });\n      } else if (this.questions[this.questionId].type == \"number\") {\n        this.$store.commit('setAnswer', {\n          question: this.questionId,\n          answer: this.numberAnswer\n        });\n      } else if (this.questions[this.questionId].type == \"limit\") {\n        this.$store.commit('setAnswer', {\n          question: this.questionId,\n          answer: this.limitAnswer.toLowerCase()\n        });\n      }\n\n      this.$soundEffects.play(this.character + '-' + (this.correct ? 'happy' : 'sad'));\n      this.$router.push({\n        name: 'result',\n        params: {\n          question: this.questionId\n        }\n      });\n    },\n    // Returns to character select\n    startOver: function startOver() {\n      this.$store.commit('resetCharacter');\n      this.$store.commit('resetAnswers');\n      this.$router.push({\n        name: 'characterSelect'\n      });\n    }\n  }\n};",{"version":3,"sources":["Question.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,SAAA,QAAA,EAAA,UAAA,QAAA,MAAA;AAEA,eAAA;AACA;AACA,MAFA,kBAEA;AACA,WAAA;AACA,gBAAA,KADA;AAEA,eAAA,KAFA;AAGA,gBAAA,KAHA;AAIA,YAAA,CAJA;AAKA,sBAAA,IALA;AAMA,oBAAA,CANA;AAOA,mBAAA,EAPA;AAQA,qBAAA;AARA,KAAA;AAUA,GAbA;AAcA,SAdA,qBAcA;AACA,aAAA,sBAAA,CAAA,MAAA,EAAA,CAAA,EAAA,SAAA,CAAA,MAAA,CAAA,IAAA;AACA,GAhBA;AAkBA,SAAA;AACA;AACA,QAFA,kBAEA;AACA,UAAA,KAAA,SAAA,CAAA,KAAA,UAAA,EAAA,IAAA,KAAA,QAAA,EAAA;AACA,aAAA,QAAA,GAAA,IAAA;AACA,aAAA,OAAA,GAAA,KAAA;AACA,aAAA,QAAA,GAAA,KAAA;AACA,OAJA,MAIA,IAAA,KAAA,SAAA,CAAA,KAAA,UAAA,EAAA,IAAA,KAAA,OAAA,EAAA;AACA,aAAA,QAAA,GAAA,KAAA;AACA,aAAA,OAAA,GAAA,IAAA;AACA,aAAA,QAAA,GAAA,KAAA;AACA,OAJA,MAIA,IAAA,KAAA,SAAA,CAAA,KAAA,UAAA,EAAA,IAAA,KAAA,QAAA,EAAA;AACA,aAAA,QAAA,GAAA,KAAA;AACA,aAAA,OAAA,GAAA,KAAA;AACA,aAAA,QAAA,GAAA,IAAA;AACA,OAJA,MAIA;AACA,gBAAA,GAAA,CAAA,qCAAA;AACA,aAAA,QAAA,GAAA,KAAA;AACA,aAAA,OAAA,GAAA,KAAA;AACA,aAAA,QAAA,GAAA,KAAA;AACA;AACA;AArBA,GAlBA;AA0CA;AACA;AACA;AACA,kBAFA,4BAEA;AACA,aAAA,KAAA,SAAA,CAAA,MAAA;AACA,KAJA;AAMA;AACA,cAPA,wBAOA;AACA,WAAA,IAAA,IAAA,CAAA;AACA,UAAA,KAAA,KAAA,MAAA,CAAA,MAAA,CAAA,QAAA;AACA,aAAA,OAAA,KAAA,SAAA,CAAA,EAAA,CAAA,IAAA,WAAA,GACA,EADA,GAEA,IAFA;AAGA,KAbA;AAeA;AACA;AACA,YAjBA,sBAiBA;AACA,aAAA,KAAA,UAAA,KAAA,IAAA,GACA,EADA,GAEA,KAAA,SAAA,CAAA,KAAA,UAAA,EAAA,QAFA;AAGA,KArBA;AAuBA;AACA;AACA,mBAzBA,6BAyBA;AACA,UAAA,KAAA,UAAA,IAAA,IAAA,EAAA;AACA,YAAA,KAAA,SAAA,CAAA,KAAA,UAAA,EAAA,IAAA,KAAA,QAAA,EAAA;AACA,iBAAA,KAAA,SAAA,CAAA,KAAA,UAAA,EAAA,OAAA,CACA,GADA,CACA,UAAA,CAAA,EAAA,CAAA;AAAA,mBAAA;AAAA,iBAAA,CAAA;AAAA,iBAAA;AAAA,aAAA;AAAA,WADA,EAEA,GAFA,CAEA,UAAA,CAAA;AAAA,mBAAA,CAAA,KAAA,MAAA,EAAA,EAAA,CAAA,CAAA;AAAA,WAFA,EAGA,GAHA,CAGA,UAAA,CAAA;AAAA,mBAAA,EAAA,CAAA,CAAA;AAAA,WAHA,CAAA;AAIA;AACA;;AAEA,aAAA,EAAA;AACA,KApCA;AAsCA;AACA,YAvCA,sBAuCA;AACA,UAAA,KAAA,SAAA,KAAA,IAAA,EAAA,OAAA,OAAA;AACA,aAAA,IAAA;AACA,KA1CA;AA4CA;AACA,oBA7CA,8BA6CA;AACA,aAAA;AACA,qBAAA,CAAA,MAAA,CAAA,KAAA,SAAA,CAAA,KAAA,UAAA,EAAA,SAAA,GAAA,CAAA,IAAA,EAAA,GAAA,KAAA,SAAA,CAAA,KAAA,UAAA,EAAA,SAAA,GAAA,EAAA,KAAA,KAAA,SAAA,CAAA,KAAA,UAAA,EAAA,SAAA,GAAA,CAAA,CAAA,GAAA,IADA;AAEA,uBAAA,CAAA,MAAA,KAAA,SAAA,CAAA,KAAA,UAAA,EAAA,SAAA,GAAA,EAAA,IAAA,KAAA,SAAA,CAAA,KAAA,UAAA,EAAA,SAAA,GAAA,IAFA;AAGA,gBAAA,CAHA;AAIA,gBAAA,CAJA;AAKA,oBAAA,qCALA;AAMA,mBAAA,MANA;AAOA,kBAAA,KAAA,IAPA;AAQA,oBAAA,aARA;AASA,eAAA,MAAA;AATA,OAAA;AAWA,KAzDA;AA2DA;AACA,uBA5DA,iCA4DA;AACA,aAAA;AACA,oBAAA,SADA;AAEA,yBAAA,iDAFA;AAGA,4BAAA,QAHA;AAIA,wBAAA,MAAA,KAAA,SAAA,CAAA,KAAA,UAAA,EAAA,SAAA,GAAA,KAAA,GAAA,CAAA,GAAA,IAJA;AAKA,0BAAA,UALA;AAMA,6BAAA,MAAA,MAAA,KAAA,SAAA,CAAA,KAAA,UAAA,EAAA,SAAA,CAAA,GAAA,IANA;AAOA,eAAA,MAAA,IAPA;AAQA,gBAAA,IAAA;AARA,OAAA;AAUA,KAvEA;AAyEA;AACA,WA1EA,qBA0EA;AACA,aAAA,KAAA,OAAA,CAAA,KAAA,UAAA,CAAA;AACA;AA5EA,KA+EA,SAAA,CACA,WADA,EAEA,SAFA,CAAA,CA/EA,EAqFA,WAAA,CACA,WADA,EAEA,OAFA,CAAA,CArFA,CA3CA;AAsIA;AACA,WAAA;AACA;AACA;AACA,gBAHA,wBAGA,MAHA,EAGA;AACA,WAAA,YAAA,GAAA,IAAA;AACA,WAAA,cAAA,GAAA,OAAA,CAAA;AACA,WAAA,UAAA,GAAA,OAAA,CAAA;AACA,KAPA;AASA,kBATA,4BASA;AACA,UAAA,KAAA,QAAA,EAAA,OAAA,KAAA;;AACA,UAAA,KAAA,QAAA,EAAA;AACA,eAAA,KAAA,YAAA,KAAA,IAAA;AACA,OAJA,CAMA;;;AACA,aAAA,CAAA,KAAA,WAAA,CAAA,MAAA;AAEA,KAlBA;AAqBA;AACA,gBAtBA,0BAsBA;AACA,UAAA,KAAA,cAAA,KAAA,IAAA,EAAA;AACA,aAAA,MAAA,CAAA,MAAA,CAAA,WAAA,EAAA;AACA,oBAAA,KAAA,UADA;AAEA,kBAAA,KAAA;AAFA,SAAA;AAIA,OALA,MAKA,IAAA,KAAA,SAAA,CAAA,KAAA,UAAA,EAAA,IAAA,IAAA,QAAA,EAAA;AACA,aAAA,MAAA,CAAA,MAAA,CAAA,WAAA,EAAA;AACA,oBAAA,KAAA,UADA;AAEA,kBAAA,KAAA;AAFA,SAAA;AAIA,OALA,MAKA,IAAA,KAAA,SAAA,CAAA,KAAA,UAAA,EAAA,IAAA,IAAA,OAAA,EAAA;AACA,aAAA,MAAA,CAAA,MAAA,CAAA,WAAA,EAAA;AACA,oBAAA,KAAA,UADA;AAEA,kBAAA,KAAA,WAAA,CAAA,WAAA;AAFA,SAAA;AAIA;;AAEA,WAAA,aAAA,CAAA,IAAA,CAAA,KAAA,SAAA,GAAA,GAAA,IAAA,KAAA,OAAA,GAAA,OAAA,GAAA,KAAA,CAAA;AAEA,WAAA,OAAA,CAAA,IAAA,CAAA;AAAA,cAAA,QAAA;AAAA,gBAAA;AAAA,oBAAA,KAAA;AAAA;AAAA,OAAA;AACA,KA3CA;AA6CA;AACA,aA9CA,uBA8CA;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,gBAAA;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,cAAA;AACA,WAAA,OAAA,CAAA,IAAA,CAAA;AAAA,cAAA;AAAA,OAAA;AACA;AAlDA;AAvIA,CAAA","sourcesContent":["<template>\n    <div class=\"question\">\n        \n        <div class=\"question__title__parent\">\n            <div :class=\"'question__title--' + character\"></div>\n            <h1 class=\"question__title\">{{questions[questionId].category}}</h1>\n        </div>\n        <!--<p class=\"question__desc\"></p>-->\n        <hr class=\"question__hr\">\n        <h3 class=\"question__progress\">Pregunta {{questionId + 1}} De {{questionsCount}}</h3>\n        <h2 class=\"question__question\" v-html=\"question\"></h2>\n        <ul class=\"question__answers\" :class=\"{'question__answers__active' : isChoice}\">\n            <li v-for=\"answer in possibleAnswers\" class=\"question__answer\" :class=\"{'question__answer--selected': selectedAnswer == answer.i}\" @click=\"selectAnswer(answer)\">\n                <i class=\"fa\"\t :class=\"{'circle-o': selectedAnswer != answer.i, 'check-circle': selectedAnswer == answer.i}\" aria-hidden=\"true\"></i>\n                <div class=\"answer\" >{{answer.a}}</div>\n                <br>\n            </li>\n        </ul>\n        <input type=\"number\" class=\"question__number\" :class=\"{'question__number__active' : isNumber}\" v-model.number=\"numberAnswer\" max=\"9999\"/>\n        <input @change=\"submitDisabled\" class=\"question__limit\" type=\"text\" :class=\"{'question__limit__active' : isLimit}\" v-bind:maxlength=\"questions[questionId].maxLength\" :style=\"styleLimitAnswer\" v-model.text=\"limitAnswer\"/>\n        <div class=\"question__limit\" :class=\"{'question__limit__active__underline' : isLimit}\" :style=\"styleLimitUnderline\"> </div>\n        <button :disabled=\"submitDisabled()\" class=\"question__submit\" href=\"#\" @click.prevent=\"submitAnswer()\">¡ENVIAR LA RESPUESTA!</button>\n        <p class=\"question__score\"><i class=\"fa fa-leaf\" aria-hidden=\"true\"></i> PUNTUACIÓN: {{score}}</p>\n        <p class=\"question__reset\"><a href=\"#\" @click.prevent=\"startOver()\"><i class=\"fas fa-redo\"></i>Comenzar de nuevo</a></p>\n    </div>\n</template>\n\n<script>\n    import { mapState, mapGetters } from 'vuex'\n\n    export default {\n        // Local Variables\n        data() {\n            return {\n                isChoice: false,\n                isLimit: false,\n                isNumber: false,\n                tick: 0,\n                selectedAnswer: null,\n                numberAnswer: 0,\n                limitAnswer: \"\",\n                submitEnabled: false,\n            };\n        },\n        mounted() {\n            document.getElementsByClassName(\"quiz\")[0].classList.remove(\"ad\");\n        },\n\n        watch: {\n            // Whenever the id of the question changes, ticks and changes the type of question displayed\n            tick() {\n                if (this.questions[this.questionId].type === \"choice\") {\n                    this.isChoice = true;\n                    this.isLimit = false;\n                    this.isNumber = false;\n                } else if (this.questions[this.questionId].type === \"limit\") {\n                    this.isChoice = false;\n                    this.isLimit = true;\n                    this.isNumber = false;\n                } else if (this.questions[this.questionId].type === \"number\") {\n                    this.isChoice = false;\n                    this.isLimit = false;\n                    this.isNumber = true;\n                } else {\n                    console.log(\"ERROR: Question did not have a type\");\n                    this.isChoice = false;\n                    this.isLimit = false;\n                    this.isNumber = false;\n                }\n            },\n        },\n\n        // Computed variables are set whenever one of the variables involved changes value\n        computed: {\n            // questionsCount: Number of questions in total\n            questionsCount() {\n                return this.questions.length;\n            },\n\n            // questionId: The id of the question (ex: 3rd question out of 10)\n            questionId() {\n                this.tick += 1;\n                let id = this.$route.params.question;\n                return typeof this.questions[id] != \"undefined\"\n                    ? id\n                    : null;\n            },\n\n            // question: The question text\n            // If the question does not exist, returns an empty string\n            question() {\n                return this.questionId === null\n                    ? \"\"\n                    : this.questions[this.questionId].question;\n            },\n\n            // possibleAnswers: All possible answers of a multiple choice question\n            // Returns the answers in a random order\n            possibleAnswers() {\n                if (this.questionId != null) {\n                    if (this.questions[this.questionId].type === \"choice\") {\n                        return this.questions[this.questionId].answers\n                        .map((a, i) => ({i: i, a: a}))\n                        .map((a) => [Math.random(), a])\n                        .map((a) => a[1]);\n                    }\n                }\n\n                return [];\n            },\n\n            // If the character becomes null, returns to the starting page\n            redirect() {\n                if(this.character === null) return '/quiz';\n                return null;\n            },\n            \n            // Styles limit questions\n            styleLimitAnswer() {\n                return {\n                    paddingLeft: ((225 - ((this.questions[this.questionId].maxLength - 1) * 11) - ((this.questions[this.questionId].maxLength) * 18)) / (this.questions[this.questionId].maxLength + 1)) + \"px\",\n                    letterSpacing: (((235 - (this.questions[this.questionId].maxLength) * 11) / (this.questions[this.questionId].maxLength))) + \"px\",\n                    border: 0,\n                    margin: 0,\n                    fontFamily: '\"Lucida Console\", Lucida, monospace',\n                    fontStyle: \"bold\",\n                    fontSize: 18 + \"px\",\n                    background: \"transparent\",\n                    width: 235 + \"px\",\n                }\n            },\n\n            // Styles the underline of limit questions\n            styleLimitUnderline() {\n                return {\n                    background: \"#0099a9\",\n                    backgroundImage: \"linear-gradient(to left, white 70%, #0099a9 0%)\",\n                    backgroundPosition: \"bottom\",\n                    backgroundSize: (235 / (this.questions[this.questionId].maxLength)) + \"px \" + 1 + \"px\",\n                    backgroundRepeat: \"repeat-x\",\n                    backgroundPositionX: (.7 * (235 / (this.questions[this.questionId].maxLength))) + \"px\",\n                    width: 230 + \"px\",\n                    height: 1 + \"px\",\n                }\n            },            \n\n            // correct: A boolean indicating whether was answered correctly or not\n            correct() {\n                return this.answers[this.questionId];\n            },\n\n            // Gets state properties for listed variables\n            ...mapState([\n                'character',\n                'answers'\n            ]),\n\n            // Generates getter functions for listed variables\n            ...mapGetters([\n                'questions',\n                'score'\n            ]),\n        },\n\n        // Functions that can be called\n        methods: {\n            // Selects an answer to the question\n            // answer: id of the answer to be selected\n            selectAnswer(answer) {\n                this.answerFilled = true;              \n                this.selectedAnswer = answer.i;\n                this.answerDesc = answer.a\n            },\n            \n            submitDisabled() {\n                if(this.isNumber) return false;                \n                if (this.isChoice) {\n                  return (this.answerFilled !== true);\n                }\n\n                // otherwise we're dealing with an entered field\n                return !this.limitAnswer.length;\n                \n            },\n            \n\n            // Submits the selected answer, thereby calling the result for the question\n            submitAnswer() {\n                if (this.selectedAnswer !== null) {\n                    this.$store.commit('setAnswer', {\n                        question: this.questionId,\n                        answer: this.answerDesc\n                    });\n                } else if (this.questions[this.questionId].type == \"number\") {\n                    this.$store.commit('setAnswer', {\n                        question: this.questionId,\n                        answer: this.numberAnswer\n                    });\n                } else if (this.questions[this.questionId].type == \"limit\") {\n                    this.$store.commit('setAnswer', {\n                        question: this.questionId,\n                        answer: this.limitAnswer.toLowerCase()\n                    });\n                }\n\n                this.$soundEffects.play(this.character + '-' + (this.correct ? 'happy' : 'sad'));\n\n                this.$router.push({ name: 'result', params: { question: this.questionId } });\n            },\n\n            // Returns to character select\n            startOver() {\n                this.$store.commit('resetCharacter');\n                this.$store.commit('resetAnswers');\n                this.$router.push({ name: 'characterSelect' });\n            },\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    @import \"@/styles/utils.scss\";\n\n    .question {\n        padding: 40px;\n        height: calc(100% - 80px);\n        background-color: $color-cyan;\n        color: $color-white;\n\n        @include bp(xl) {\n            position: absolute;\n            width: 100%;\n            box-sizing: border-box;\n        }\n\n        &__title {\n            position: absolute;\n            bottom: 0px;\n            font-family: $font-headline-sans-serif;\n            text-transform: uppercase;\n            font-size: 20px;\n            line-height: 1.1em;\n            margin: 0px 0px 15px 0px;\n            padding-left: 70px;\n            background-repeat: no-repeat;\n            background-size: 55px 53px;\n            background-position: left center;\n\n            &__parent {\n                position: relative;\n                height: 55px;\n                margin-bottom: 5px;\n            }\n\n            &--baby {\n                height: 55px;\n                width: 53px;\n                background-image: url('../assets/characters/character-baby-content.svg');\n                background-repeat: no-repeat;\n            }\n            &--fish {\n                height: 55px;\n                width: 53px;\n                background-image: url('../assets/characters/character-fish-content.svg');\n                background-repeat: no-repeat;\n            }\n            &--robot {\n                height: 55px;\n                width: 53px;\n                background-image: url('../assets/characters/character-robot-content.svg');\n                background-repeat: no-repeat;\n            }\n            &--dog {\n                height: 55px;\n                width: 53px;\n                background-image: url('../assets/characters/character-dog-content.svg');\n                background-repeat: no-repeat;\n            }\n            &--grandpa {\n                height: 55px;\n                width: 53px;\n                background-image: url('../assets/characters/character-grandpa-content.svg');\n                background-repeat: no-repeat;\n            }\n        }\n\n        &__desc {\n            font-size: 10px;\n            line-height: 1.3em;\n            margin: 0px 0px 20px 0px;\n        }\n\n        &__hr {\n            border: none;\n            border-bottom: 1px solid $color-white;\n            margin: 0px 0px 20px 0px;\n        }\n\n        &__progress {\n            font-size: 9px;\n            text-transform: uppercase;\n            margin: 0px 0px 0px 0px;\n            font-weight: normal;\n        }\n\n        &__question {\n            font-size: 14px;\n            line-height: 1.1em;\n            margin: 0px 0px 15px 0px;\n            font-weight: normal;\n        }\n\n        &__answers {\n            padding: 0;\n            margin: 0;\n            list-style: none;\n            display: none;\n\t\t\t.fa-circle-o{\n\t\t\t\tfont-family: \"Font Awesome 5px Free\";\n\t\t\t\tfont-size:15px;\n\t\t\t\twidth:15px;\n\t\t\t\theight:15px;\n\t\t\t}\n\t\t\t.circle-o{\n\t\t\t\twidth:13px;\n\t\t\t\theight:13px;\n\t\t\t\tbackground-image: url('../assets/NEF_checkbox.svg');\n\t\t\t\tbackground-size:cover;\n\t\t\t}\n\t\t\t.check-circle{\n\t\t\t\twidth:13px;\n\t\t\t\theight:13px;\n\t\t\t\tbackground-image: url('../assets/NEF_checkbox_active.svg');\n\t\t\t\tbackground-size:cover;\n\t\t\t}\n            &__active {\n                display: inline;\n            }\n        }\n\n        &__number {\n            margin: 0;\n            list-style: none;\n            display: none;\n            border: 0;\n            text-align: center;\n            color: #fff;\n            font-size: 18px;\n            background: #0099a9;\n            background-image: linear-gradient(to left, white 100%, #0099a9 0%);\n            background-image: -webkit-linear-gradient(to left, white 100%, #0099a9 0%);\n            background-image: linear-gradient(to left, white 100%, #0099a9 0%);\n            background-position: bottom;\n            background-size: 100px 1px;\n            background-repeat: repeat-x;\n            width: 100px;\n            background-position-x: -20px;\n\n            &__active {\n                display: inline;\n            }\n        }\n\n        &__answer {\n            clear: both;\n            font-size: 13px;\n            cursor: pointer;\n//            margin: 0px 0px 15px 0px;\n//            height: 22px;\n            line-height: 15px;\n\n            & > i {\n                margin-right: 5px;\n            }\n\n            &--selected {\n                & > i {\n                    color: $color-orange;\n                }\n            }\n        }\n\n        &__limit {\n            padding: 0;\n            margin: 0;\n            color: #fff;\n            list-style: none;\n            display: none;\n\n            &__active {\n                display: inline;\n\n                &__underline {\n                    display: block;\n                }\n            }\n        }\n\n        &__submit {\n            @include button($color-orange);\n            \n            font-size: 12px;\n            margin-top: 10px;\n        }\n\n        &__score {\n            color: $color-green;\n            font-size: 12px;\n            text-transform: uppercase;\n            margin-top: 20px;\n\t\t\tfont-weight:bold;\n            & > i {\n                margin-right: 5px;\n            }\n        }\n\n        &__reset {\n            position: absolute;\n            top: 5px;\n            right: 5px;\n            font-size: 8px;\n            i {\n      \t\t\t\tdisplay:inline-block;\n      \t\t\t\ttext-align:center;\n      \t\t\t\tpadding-right: .5em;\n            }\n            & > a {\n                color: $color-orange;\n                font-size: 12px;\n                text-transform: uppercase;\n                font-weight: bold;\n                text-decoration: none;\n\n                &:hover {\n                    text-decoration: underline;\n                }\n            }\n        }\n        input[type=text]::-ms-clear{\n\t\t\tdisplay:none;\n\t\t}\n    }\n\n    .answer {\n//        float: left;\n//        max-width: 200px;\n    }\n\n    .fa {\n        float: left;\n    }\n</style>\n\n"],"sourceRoot":"src/views"}]}